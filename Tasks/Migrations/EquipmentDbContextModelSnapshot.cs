// <auto-generated />
using System;
using ConsoleApp106.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Tasks.Migrations
{
    [DbContext(typeof(EquipmentDbContext))]
    partial class EquipmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConsoleApp106.Model.BatchTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateTimeUploaded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EquipmentProcessId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentTblId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("ConsoleApp106.Model.CleanTableCompressor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<float>("DT1")
                        .HasColumnType("real");

                    b.Property<float>("DT2")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("PD1")
                        .HasColumnType("real");

                    b.Property<float>("PD2")
                        .HasColumnType("real");

                    b.Property<float>("PR1")
                        .HasColumnType("real");

                    b.Property<float>("PR2")
                        .HasColumnType("real");

                    b.Property<float>("TD1")
                        .HasColumnType("real");

                    b.Property<float>("TD2")
                        .HasColumnType("real");

                    b.Property<float>("TS1")
                        .HasColumnType("real");

                    b.Property<float>("TS2")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("Compressor_Cleaning");
                });

            modelBuilder.Entity("ConsoleApp106.Model.ErrorTableCompressor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rowAffected")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("Compressor_Error");
                });

            modelBuilder.Entity("ConsoleApp106.Model.PredictedTableCompressor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<float>("DT1")
                        .HasColumnType("real");

                    b.Property<float>("DT2")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("PD1")
                        .HasColumnType("real");

                    b.Property<float>("PD2")
                        .HasColumnType("real");

                    b.Property<float>("PR1")
                        .HasColumnType("real");

                    b.Property<float>("PR2")
                        .HasColumnType("real");

                    b.Property<float>("TD1")
                        .HasColumnType("real");

                    b.Property<float>("TD2")
                        .HasColumnType("real");

                    b.Property<float>("TS1")
                        .HasColumnType("real");

                    b.Property<float>("TS2")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("Compressor_Predicted");
                });

            modelBuilder.Entity("ConsoleApp106.Model.ProcessedTableCompressor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<float>("DT1")
                        .HasColumnType("real");

                    b.Property<float>("DT2")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("PD1")
                        .HasColumnType("real");

                    b.Property<float>("PD2")
                        .HasColumnType("real");

                    b.Property<float>("PR1")
                        .HasColumnType("real");

                    b.Property<float>("PR2")
                        .HasColumnType("real");

                    b.Property<float>("TD1")
                        .HasColumnType("real");

                    b.Property<float>("TD2")
                        .HasColumnType("real");

                    b.Property<float>("TS1")
                        .HasColumnType("real");

                    b.Property<float>("TS2")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("Compressor_Processed");
                });

            modelBuilder.Entity("ConsoleApp106.Model.StagingTableCompressor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<float>("DT1")
                        .HasColumnType("real");

                    b.Property<float>("DT2")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("PD1")
                        .HasColumnType("real");

                    b.Property<float>("PD2")
                        .HasColumnType("real");

                    b.Property<float>("PR1")
                        .HasColumnType("real");

                    b.Property<float>("PR2")
                        .HasColumnType("real");

                    b.Property<float>("TD1")
                        .HasColumnType("real");

                    b.Property<float>("TD2")
                        .HasColumnType("real");

                    b.Property<float>("TS1")
                        .HasColumnType("real");

                    b.Property<float>("TS2")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("Compressor_Staging");
                });

            modelBuilder.Entity("ConsoleApp106.Model.CleanTableCompressor", b =>
                {
                    b.HasOne("ConsoleApp106.Model.BatchTable", "batchTable")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp106.Model.ErrorTableCompressor", b =>
                {
                    b.HasOne("ConsoleApp106.Model.BatchTable", "batchTable")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp106.Model.PredictedTableCompressor", b =>
                {
                    b.HasOne("ConsoleApp106.Model.BatchTable", "batchTable")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp106.Model.ProcessedTableCompressor", b =>
                {
                    b.HasOne("ConsoleApp106.Model.BatchTable", "batchTable")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp106.Model.StagingTableCompressor", b =>
                {
                    b.HasOne("ConsoleApp106.Model.BatchTable", "batchTable")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
